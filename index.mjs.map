{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isArray = require( '@stdlib/assert-is-array' );\nvar isOrder = require( '@stdlib/ndarray-base-assert-is-order' );\nvar isIndexMode = require( '@stdlib/ndarray-base-assert-is-index-mode' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {(StringArray|string)} [options.mode] - specifies how to handle subscripts which exceed array dimensions\n* @param {string} [options.order] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'mode': 'throw',\n*     'order': 'column-major'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tvar i;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isArray( opts.mode ) ) {\n\t\t\topts.mode = [ opts.mode ];\n\t\t} else if ( opts.mode.length === 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option cannot be an empty array.', 'mode' ) );\n\t\t}\n\t\tfor ( i = 0; i < opts.mode.length; i++ ) {\n\t\t\tif ( !isIndexMode( opts.mode[ i ] ) ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a supported/recognized mode. Option: `%s`.', 'mode', opts.mode[ i ] ) );\n\t\t\t}\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t\tif ( !isOrder( opts.order ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a supported/recognized order. Option: `%s`.', 'order', opts.order ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeIntegerArray = require( '@stdlib/assert-is-nonnegative-integer-array' ).primitives;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar getIndex = require( '@stdlib/ndarray-base-sub2ind' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Converts subscripts to a linear index.\n*\n* ## Notes\n*\n* -   The function accepts the following \"modes\":\n*\n*     -   `throw`: throws an error when a subscript exceeds array dimensions.\n*     -   `wrap`: wrap around subscripts exceeding array dimensions using modulo arithmetic.\n*     -   `clamp`: set subscripts exceeding array dimensions to either `0` (minimum index) or the maximum index along a particular dimension.\n*\n* -   If provided fewer modes than dimensions, the function recycles modes using modulo arithmetic.\n*\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {...integer} i - subscripts\n* @param {Options} [options] - function options\n* @param {(StringArray|string)} [options.mode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions\n* @param {string} [options.order=\"row-major\"] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @throws {TypeError} first argument must be an array-like object containing nonnegative integers\n* @throws {TypeError} subscripts must be integer valued\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} must provide subscripts which do not exceed array dimensions\n* @throws {RangeError} number of subscripts much match the number of dimensions\n* @returns {NonNegativeInteger} linear index\n*\n* @example\n* var i = sub2ind( [ 3, 3, 3 ], 1, 2, 2 );\n* // returns 17\n*/\nfunction sub2ind() {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar args;\n\tvar opts;\n\tvar err;\n\tvar len;\n\tvar i;\n\tvar j;\n\n\tshape = arguments[ 0 ];\n\tif ( !isNonNegativeIntegerArray( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\tlen = arguments.length;\n\tndims = shape.length;\n\n\topts = {};\n\topts.mode = defaults.mode.slice();\n\topts.order = defaults.order;\n\n\tif ( len > ndims+1 ) {\n\t\tj = len - 1;\n\t\toptions = arguments[ j ];\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tj = len;\n\t}\n\ti = 1;\n\tif ( j-i !== ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of provided subscripts must match the number of dimensions. ndims: %u. Number of subscripts: %u.', ndims, j-i ) );\n\t}\n\targs = new Array( ndims+4 );\n\targs[ 0 ] = shape;\n\targs[ 1 ] = shape2strides( shape, opts.order );\n\targs[ 2 ] = 0; // strides are positive, so offset is always zero\n\tfor ( ; i < j; i++ ) {\n\t\tif ( !isInteger( arguments[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Subscripts must be integer valued. Argument: %u. Value: `%s`.', i, arguments[ i ] ) );\n\t\t}\n\t\targs[ i+2 ] = arguments[ i ];\n\t}\n\targs[ i+2 ] = opts.mode; // i+2 == args.length-1\n\treturn getIndex.apply( null, args );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sub2ind;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert subscripts to a linear index.\n*\n* @module @stdlib/ndarray-sub2ind\n*\n* @example\n* var sub2ind = require( '@stdlib/ndarray-sub2ind' );\n*\n* var i = sub2ind( [ 3, 3, 3 ], 1, 2, 2 );\n* // returns 17\n*/\n\n// MODULES //\n\nvar sub2ind = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = sub2ind;\n"],"names":["isObject","require$$0","hasOwnProp","require$$1","isArray","require$$2","isOrder","require$$3","isIndexMode","require$$4","format","require$$5","validate_1","opts","options","i","TypeError","mode","length","order","isNonNegativeIntegerArray","primitives","isInteger","isPrimitive","shape2strides","getIndex","defaults","validate","require$$6","lib","shape","ndims","args","err","len","j","arguments","slice","RangeError","Array","apply"],"mappings":";;y7BAsBIA,EAAWC,EACXC,EAAaC,EACbC,EAAUC,EACVC,EAAUC,EACVC,EAAcC,EACdC,EAASC,EAwDb,IAAAC,EA9BA,SAAmBC,EAAMC,GACxB,IAAIC,EACJ,IAAMf,EAAUc,GACf,OAAO,IAAIE,UAAWN,EAAQ,qEAAsEI,IAErG,GAAKZ,EAAYY,EAAS,QAAW,CAEpC,GADAD,EAAKI,KAAOH,EAAQG,KACdb,EAASS,EAAKI,OAEb,GAA0B,IAArBJ,EAAKI,KAAKC,OACrB,OAAO,IAAIF,UAAWN,EAAQ,wDAAyD,cAFvFG,EAAKI,KAAO,CAAEJ,EAAKI,MAIpB,IAAMF,EAAI,EAAGA,EAAIF,EAAKI,KAAKC,OAAQH,IAClC,IAAMP,EAAaK,EAAKI,KAAMF,IAC7B,OAAO,IAAIC,UAAWN,EAAQ,iFAAkF,OAAQG,EAAKI,KAAMF,KAItI,OAAKb,EAAYY,EAAS,WACzBD,EAAKM,MAAQL,EAAQK,OACfb,EAASO,EAAKM,QACZ,IAAIH,UAAWN,EAAQ,kFAAmF,QAASG,EAAKM,QAG1H,MCvDJC,EAA4BnB,EAAyDoB,WACrFC,EAAYnB,EAAuCoB,YACnDC,EAAgBnB,EAChBoB,EAAWlB,EACXG,EAASD,EACTiB,EAAWf,EACXgB,EAAWC,EAyFf,IC9EAC,EDyBA,WACC,IACIC,EACAC,EACAC,EACAnB,EACAoB,EACAC,EACAnB,EACAoB,EAGJ,IAAMf,EADNU,EAAQM,UAAW,IAElB,MAAM,IAAIpB,UAAWN,EAAQ,8GAA+GoB,IAS7I,GAPAI,EAAME,UAAUlB,OAChBa,EAAQD,EAAMZ,QAEdL,EAAO,IACFI,KAAOS,EAAST,KAAKoB,QAC1BxB,EAAKM,MAAQO,EAASP,MAEjBe,EAAMH,EAAM,GAIhB,GADAE,EAAMN,EAAUd,EADNuB,UADVD,EAAID,EAAM,IAIT,MAAMD,OAGPE,EAAID,EAGL,GAAKC,GADLpB,EAAI,KACSgB,EACZ,MAAM,IAAIO,WAAY5B,EAAQ,4HAA6HqB,EAAOI,EAAEpB,IAMrK,KAJAiB,EAAO,IAAIO,MAAOR,EAAM,IAClB,GAAMD,EACZE,EAAM,GAAMR,EAAeM,EAAOjB,EAAKM,OACvCa,EAAM,GAAM,EACJjB,EAAIoB,EAAGpB,IAAM,CACpB,IAAMO,EAAWc,UAAWrB,IAC3B,MAAM,IAAIC,UAAWN,EAAQ,kFAAmFK,EAAGqB,UAAWrB,KAE/HiB,EAAMjB,EAAE,GAAMqB,UAAWrB,GAG1B,OADAiB,EAAMjB,EAAE,GAAMF,EAAKI,KACZQ,EAASe,MAAO,KAAMR"}