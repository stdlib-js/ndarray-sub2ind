// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import{primitives as e}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nonnegative-integer-array@v0.2.0-esm/index.mjs";import{isPrimitive as r}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-integer@v0.2.0-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-shape2strides@v0.2.0-esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-sub2ind@v0.2.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.2.0-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.2.0-esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-array@v0.2.0-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-order@v0.2.0-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-index-mode@v0.1.1-esm/index.mjs";var p={mode:["throw"],order:"row-major"};function l(e,r){var s;if(!i(r))return new TypeError(n("invalid argument. Options argument must be an object. Value: `%s`.",r));if(o(r,"mode")){if(e.mode=r.mode,d(e.mode)){if(0===e.mode.length)return new TypeError(n("invalid option. `%s` option cannot be an empty array.","mode"))}else e.mode=[e.mode];for(s=0;s<e.mode.length;s++)if(!a(e.mode[s]))return new TypeError(n("invalid option. `%s` option must be a supported/recognized mode. Option: `%s`.","mode",e.mode[s]))}return o(r,"order")&&(e.order=r.order,!m(e.order))?new TypeError(n("invalid option. `%s` option must be a supported/recognized order. Option: `%s`.","order",e.order)):null}function u(){var i,o,d,m,a,u,j,v;if(!e(i=arguments[0]))throw new TypeError(n("invalid argument. First argument must be an array-like object containing nonnegative integers. Value: `%s`.",i));if(u=arguments.length,o=i.length,(m={}).mode=p.mode.slice(),m.order=p.order,u>o+1){if(a=l(m,arguments[v=u-1]))throw a}else v=u;if(v-(j=1)!==o)throw new RangeError(n("invalid argument. Number of provided subscripts must match the number of dimensions. ndims: `%u`. Number of subscripts: `%u`.",o,v-j));for((d=new Array(o+4))[0]=i,d[1]=s(i,m.order),d[2]=0;j<v;j++){if(!r(arguments[j]))throw new TypeError(n("invalid argument. Subscripts must be integer valued. Argument: `%u`. Value: `%s`.",j,arguments[j]));d[j+2]=arguments[j]}return d[j+2]=m.mode,t.apply(null,d)}export{u as default};
//# sourceMappingURL=index.mjs.map
